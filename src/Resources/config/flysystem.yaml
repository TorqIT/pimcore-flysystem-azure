services:
    azure_client_service:
        class: MicrosoftAzure\Storage\Blob\BlobRestProxy
        factory: ['MicrosoftAzure\Storage\Blob\BlobRestProxy', 'createBlobService']
        arguments:
            $connectionString: 'DefaultEndpointsProtocol=https;AccountName=%env(string:AZURE_STORAGE_ACCOUNT_NAME)%;AccountKey=%env(string:AZURE_STORAGE_ACCOUNT_KEY)%;EndpointSuffix=core.windows.net'

    # Pimcore X still uses flysystem-bundle v2, which didn't yet include the AzureBlobStorageAdapter in its
    # factory method. As a result, we need to manually instantiate the adapter as a service here (or more accurately, instantiate a service
    # per storage need).
    # 
    # Pimcore 11 uses flysystem-bundle v3, so once we've updated to that we can simplify this.
    #
    document_static_adapter:
        # See TorqAzureBlobStorageAdapter - we needed to modify their source slightly
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'pages'
    assets_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'assets'
    asset_cache_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'asset-cache'
    thumbnail_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'thumbnails'
    version_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'versions'
    recycle_bin_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'recyclebin'
    admin_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'admin'
    email_log_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'email'
    tmp_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'tmp'
    application_log_adapter:
        class: 'TorqIT\FlysystemAzureBundle\TorqAzureBlobStorageAdapter'
        arguments:
            $client: '@azure_client_service' 
            $container: '%env(string:AZURE_STORAGE_ACCOUNT_CONTAINER)%'
            $prefix: 'application-log'

flysystem:
    storages:
        pimcore.document_static.storage:
            # Storage for generated static document pages, e.g. .html files generated out of Pimcore documents
            # which are then delivered directly by the web-server
            adapter: 'document_static_adapter'
            visibility: public
        pimcore.asset.storage:
            # Storage for asset source files, directory structure is equal to the asset tree structure
            adapter: 'assets_adapter'
            visibility: public
        pimcore.asset_cache.storage:
            # Storage for cached asset files, e.g. PDF and image files generated out of Office files or videos
            # which are then used by the thumbnail engine as source files
            adapter: 'asset_cache_adapter'
            visibility: private
        pimcore.thumbnail.storage:
            # Storage for image and video thumbnails, directory structure is equal to the source asset tree
            adapter: 'thumbnail_adapter'
            visibility: public
        pimcore.version.storage:
            # Storage for serialized versioning data of documents/asset/data objects
            adapter: 'version_adapter'
            visibility: private
        pimcore.recycle_bin.storage:
            # Storage for serialized recycle bin data of documents/asset/data objects
            adapter: 'recycle_bin_adapter'
            visibility: private
        pimcore.admin.storage:
            # Storage for shared admin resources, such as the user avatar, custom logos, ...
            adapter: 'admin_adapter'
            visibility: private
        pimcore.email_log.storage:
            # Storage for email logs
            adapter: 'email_log_adapter'
            visibility: private
        pimcore.temp.storage:
            # Storage for temporary files that work under a batch process, such as export csv
            # must not be `local` for stateless environment
            adapter: 'tmp_adapter'
            visibility: private
        pimcore.application_log.storage:
            # Storage for application logs
            adapter: 'application_log_adapter'
            visibility: private

